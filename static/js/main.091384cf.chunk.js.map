{"version":3,"sources":["components/ClickablePodcastCard/ClickablePodcastCard.js","App.js","reportWebVitals.js","index.js"],"names":["ClickablePodcastCard","props","handlePodcastClick","e","preventDefault","state","isPodcastLaunched","window","open","podcast","link","today","Date","releaseDate","elementWrapperStyle","generateElementWrapperStyle","availableWidth","width","availableHeight","height","marginTop","marginBottom","this","setState","bottom","fontSize","getSuitableFontSizeForWidth","widthAvailable","fontSizeThatFits","date","class","href","onClick","style","generateReleaseDateLabelStyle","getTreatedDate","getDate","getMonth","getFullYear","src","blackedOutBackgroundImageURL","backgroundImageURL","foregroundImageURL","replace","React","Component","App","podcasts","id","windowWidth","innerWidth","windowHeight","innerHeight","isHorizontal","addEventListener","className","map","singlePodcast","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.091384cf.chunk.js","sourcesContent":["import React from 'react';\nimport './ClickablePodcastCard.css';\n\nexport default class ClickablePodcastCard extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    let today = new Date()\n\n    this.state = {\n      isPodcastLaunched: today > this.props.podcast.releaseDate,\n      elementWrapperStyle: this.generateElementWrapperStyle(props)\n    }\n  }\n\n  generateElementWrapperStyle(props) {\n    let availableWidth = props.width\n    let availableHeight = props.height\n    let marginTop = (availableHeight - availableWidth) / 2\n\n    return {\n      width: availableWidth,\n      height: availableHeight - (marginTop * 2),\n      marginTop,\n      marginBottom: marginTop\n    }\n  }\n\n  handlePodcastClick = (e) => {\n    e.preventDefault();\n    if(this.state.isPodcastLaunched) {\n      window.open(this.props.podcast.link, \"_blank\"); \n    }\n  };\n\n  componentDidUpdate(props) {\n    if(this.state.elementWrapperStyle.width != props.width && this.state.elementWrapperStyle.height != props.height) {\n      this.setState({elementWrapperStyle: this.generateElementWrapperStyle(props)})\n    }\n  }\n\n  generateReleaseDateLabelStyle() {\n    return {\n      bottom: this.state.elementWrapperStyle.width / 3,\n      fontSize: this.getSuitableFontSizeForWidth()\n    }\n  }\n\n  getSuitableFontSizeForWidth() {\n    let widthAvailable = this.state.elementWrapperStyle.width\n    let fontSizeThatFits = 24\n\n    if(widthAvailable < 100) {\n      fontSizeThatFits = 6\n    } else if(widthAvailable < 150) {\n      fontSizeThatFits = 10\n    } else if(widthAvailable < 200) {\n      fontSizeThatFits = 14\n    } else if(widthAvailable < 250) {\n      fontSizeThatFits = 16\n    } else if(widthAvailable < 300) {\n      fontSizeThatFits = 18\n    } else if(widthAvailable < 350) {\n      fontSizeThatFits = 20\n    } else if(widthAvailable < 400) {\n      fontSizeThatFits = 22\n    } \n\n    return fontSizeThatFits\n  }\n\n  getTreatedDate(date) {\n    if(date > 10) {\n      return date\n    } else {\n      return '0' + date\n    }\n  }\n\n\n  render() {\n    return (\n      <a class=\"link-wrapper\" href=\"#\" onClick={this.handlePodcastClick} style={{height: this.props.height, width: this.props.width}}>\n        <div class=\"element-wrapper\" style={this.state.elementWrapperStyle}>\n          {\n            this.state.isPodcastLaunched ? null : \n              <p class=\"release-date\" style={this.generateReleaseDateLabelStyle()}>\n                {`Lan√ßamento em: ${this.getTreatedDate(this.props.podcast.releaseDate.getDate())}.${this.props.podcast.releaseDate.getMonth() + 1}.${this.props.podcast.releaseDate.getFullYear()}`}\n              </p>\n          }\n          <img class=\"background-image\" src={this.state.isPodcastLaunched || !this.props.podcast.blackedOutBackgroundImageURL  ? this.props.podcast.backgroundImageURL : this.props.podcast.blackedOutBackgroundImageURL} />\n          <img class=\"foreground-image\" src={this.state.isPodcastLaunched ? this.props.podcast.foregroundImageURL : this.props.podcast.foregroundImageURL.replace('.png', '_hidden.png')} />\n          <img class=\"podcast-name\" src=\"./img/caravana_podcasts.png\" />\n        </div>\n      </a>\n    );\n  }\n  \n}\n","import './App.css';\nimport React from 'react';\nimport ClickablePodcastCard from './components/ClickablePodcastCard/ClickablePodcastCard';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      podcasts: [\n        {\n          id: 'dl',\n          backgroundImageURL: './img/dl_background.png',\n          foregroundImageURL: './img/dl_foreground.png',\n          releaseDate: new Date('2021-09-30'),\n          link: 'https://caravanadoabsurdo.com.br/tag/descanso-longo/'\n        },\n        {\n          id: 'rpg',\n          backgroundImageURL: './img/rpg_background.png',\n          foregroundImageURL: './img/rpg_foreground.png',\n          releaseDate: new Date('2021-10-01'),\n          link: 'https://caravanadoabsurdo.com.br/tag/mas-e-o-rpg/'\n        },\n        {\n          id: 'cos',\n          backgroundImageURL: './img/cos_background.png',\n          blackedOutBackgroundImageURL: './img/cos_background_hidden.png',\n          foregroundImageURL: './img/cos_foreground.png',\n          releaseDate: new Date('2021-10-02'),\n          link: 'https://caravanadoabsurdo.com.br/tag/maldicao-de-strahd/'\n        }\n      ],\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      isHorizontal: window.innerWidth > window.innerHeight \n    }\n\n    window.addEventListener('resize', () => {\n      this.setState({\n        windowHeight: window.innerHeight,\n        windowWidth: window.innerWidth,\n        isHorizontal: window.innerWidth > window.innerHeight\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className={[this.state.isHorizontal ? 'horizontal-slider' : 'vertical-slider']}>\n            {\n              this.state.podcasts.map(singlePodcast => {\n                return <ClickablePodcastCard \n                        podcast={singlePodcast} \n                        height={this.state.windowHeight} \n                        width={this.state.isHorizontal ? this.state.windowWidth / 3 : this.state.windowWidth} \n                      />\n              })\n            }\n          </div>\n        </header>\n      </div>\n    );\n  }\n  \n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}